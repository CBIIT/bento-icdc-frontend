type adverse_event {
  ae_dose: Float
  ae_dose_unit: String
  ae_dose_original: Float
  ae_dose_original_unit: String
  ae_agent_name: String
  day_in_cycle: Int
  date_resolved: String
  adverse_event_term: String
  adverse_event_description: String
  adverse_event_grade: String
  adverse_event_grade_description: String
  attribution_to_research: String
  attribution_to_ind: String
  attribution_to_disease: String
  attribution_to_commercial: String
  attribution_to_other: String
  ae_other: String
  dose_limiting_toxicity: String
  unexpected_adverse_event: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
  agent: agent @relation(name:"of_agent", direction:OUT)
  cases: [case] @relation(name:"had_adverse_event", direction:IN)
  next_adverse_event: adverse_event @relation(name:"next", direction:OUT)
  prior_adverse_event: adverse_event @relation(name:"next", direction:IN)
}

type agent {
  medication: String
  document_number: String
  study_arms: [study_arm] @relation(name:"of_study_arm", direction:OUT)
  agent_administrations: [agent_administration] @relation(name:"of_agent", direction:IN)
  adverse_events: [adverse_event] @relation(name:"of_agent", direction:IN)
}

type agent_administration {
  document_number: String
  medication: String
  route_of_administration: String
  medication_lot_number: String
  medication_vial_id: String
  medication_actual_units_of_measure: String
  medication_duration: Float
  medication_duration_unit: String
  medication_duration_original: Float
  medication_duration_original_unit: String
  medication_units_of_measure: String
  medication_actual_dose: Float
  medication_actual_dose_unit: String
  medication_actual_dose_original: Float
  medication_actual_dose_original_unit: String
  phase: String
  start_time: String
  stop_time: String
  dose_level: Float
  dose_level_unit: String
  dose_level_original: Float
  dose_level_original_unit: String
  dose_units_of_measure: String
  date_of_missed_dose: String
  medication_missed_dose: String
  missed_dose_amount: Float
  missed_dose_amount_unit: String
  missed_dose_amount_original: Float
  missed_dose_amount_original_unit: String
  missed_dose_units_of_measure: String
  medication_course_number: String
  comment: String
  crf_id: String
  agent: agent @relation(name:"of_agent", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type assay {
  sample: sample @relation(name:"of_sample", direction:OUT)
  files: [file] @relation(name:"of_assay", direction:IN)
  images: [image] @relation(name:"of_assay", direction:IN)
}

type case {
  case_id: String
  patient_id: String
  patient_first_name: String
  crf_id: String
  cohort: cohort @relation(name:"member_of", direction:OUT)
  study: study @relation(name:"member_of", direction:OUT)
  enrollment: enrollment @relation(name:"of_case", direction:IN)
  demographic: demographic @relation(name:"of_case", direction:IN)
  diagnoses: [diagnosis] @relation(name:"of_case", direction:IN)
  cycles: [cycle] @relation(name:"of_case", direction:IN)
  follow_ups: [follow_up] @relation(name:"of_case", direction:IN)
  samples: [sample] @relation(name:"of_case", direction:IN)
  visits: [visit] @relation(name:"of_case", direction:IN)
  adverse_events: [adverse_event] @relation(name:"of_case", direction:IN)
  adverse_event: adverse_event @relation(name:"had_adverse_event", direction:OUT)
  off_study: off_study @relation(name:"went_off_study", direction:OUT)
  off_treatment: off_treatment @relation(name:"went_off_treatment", direction:OUT)
}

type cohort {
  cohort_description: String
  cohort_dose: String
  cases: [case] @relation(name:"member_of", direction:IN)
  study_arm: study_arm @relation(name:"member_of", direction:OUT)
  study: study @relation(name:"member_of", direction:OUT)
}

type cycle {
  cycle_number: Int
  date_of_cycle_start: String
  date_of_cycle_end: String
  case: case @relation(name:"of_case", direction:OUT)
  visits: [visit] @relation(name:"of_cycle", direction:IN)
}

type demographic {
  breed: String
  patient_age_at_enrollment: Float
  patient_age_at_enrollment_unit: String
  patient_age_at_enrollment_original: Float
  patient_age_at_enrollment_original_unit: String
  date_of_birth: String
  sex: String
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  neutered_indicator: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
}

type diagnosis {
  disease_term: String
  primary_disease_site: String
  stage_of_disease: String
  date_of_diagnosis: String
  histology_cytopathology: String
  date_of_histology_confirmation: String
  histological_grade: String
  best_response: String
  pathology_report: String
  treatment_data: String
  follow_up_data: String
  concurrent_disease: String
  concurrent_disease_type: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
  files: [file] @relation(name:"from_diagnosis", direction:IN)
}

type disease_extent {
  crf_id: String
  lesion_number: String
  lesion_site: String
  lesion_description: String
  previously_irradiated: String
  previously_treated: String
  measurable_lesion: String
  target_lesion: String
  date_of_evaluation: String
  measured_how: String
  longest_measurement: String
  evaluation_number: String
  evaluation_code: String
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type enrollment {
  date_of_registration: String
  registering_institution: String
  initials: String
  date_of_informed_consent: String
  site_short_name: String
  veterinary_medical_center: String
  enrollment_document_number: String
  cohort_description: String
  patient_subgroup: String
  case: case @relation(name:"of_case", direction:OUT)
  prior_therapies: [prior_therapy] @relation(name:"at_enrollment", direction:IN)
  prior_surgeries: [prior_surgery] @relation(name:"at_enrollment", direction:IN)
  physical_exams: [physical_exam] @relation(name:"at_enrollment", direction:IN)
}

type file {
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_status: String
  uuid: String
  file_location: String
  study: study @relation(name:"of_study", direction:OUT)
  sample: sample @relation(name:"of_sample", direction:OUT)
  assay: assay @relation(name:"of_assay", direction:OUT)
  diagnosis: diagnosis @relation(name:"from_diagnosis", direction:OUT)
}

type follow_up {
  document_number: String
  date_of_last_contact: String
  patient_status: String
  explain_unknown_status: String
  contact_type: String
  treatment_since_last_contact: Boolean
  physical_exam_performed: Boolean
  physical_exam_changes: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
}

type image {
  assay: assay @relation(name:"of_assay", direction:OUT)
}

type lab_exam {
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type off_study {
  document_number: String
  date_off_study: String
  reason_off_study: String
  date_of_disease_progression: String
  date_off_treatment: String
  best_resp_vet_tx_tp_secondary_response: String
  date_last_medication_administration: String
  best_resp_vet_tx_tp_best_response: String
  date_of_best_response: String
  case: case @relation(name:"went_off_study", direction:IN)
}

type off_treatment {
  document_number: String
  date_off_treatment: String
  reason_off_treatment: String
  date_of_disease_progression: String
  best_resp_vet_tx_tp_secondary_response: String
  date_last_medication_administration: String
  best_resp_vet_tx_tp_best_response: String
  date_of_best_response: String
  case: case @relation(name:"went_off_treatment", direction:IN)
}

type physical_exam {
  date_of_examination: String
  day_in_cycle: Int
  body_system: String
  pe_finding: String
  pe_comment: String
  phase_pe: String
  assessment_timepoint: Int
  crf_id: String
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type principal_investigator {
  pi_first_name: String
  pi_last_name: String
  pi_middle_initial: String
  studies: [study] @relation(name:"of_study", direction:OUT)
}

type prior_surgery {
  date_of_surgery: String
  procedure: String
  anatomical_site_of_surgery: String
  surgical_finding: String
  residual_disease: String
  therapeutic_indicator: String
  crf_id: String
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  next_prior_surgery: prior_surgery @relation(name:"next", direction:OUT)
  prior_prior_surgery: prior_surgery @relation(name:"next", direction:IN)
}

type prior_therapy {
  date_of_first_dose: String
  date_of_last_dose: String
  agent_name: String
  dose_schedule: String
  total_dose: Float
  total_dose_unit: String
  total_dose_original: Float
  total_dose_original_unit: String
  agent_units_of_measure: String
  best_response: String
  nonresponse_therapy_type: String
  prior_therapy_type: String
  prior_steroid_exposure: Boolean
  number_of_prior_regimens_steroid: Int
  total_number_of_doses_steroid: Int
  date_of_last_dose_steroid: String
  prior_nsaid_exposure: Boolean
  number_of_prior_regimens_nsaid: Int
  total_number_of_doses_nsaid: Int
  date_of_last_dose_nsaid: String
  tx_loc_geo_loc_ind_nsaid: String
  min_rsdl_dz_tx_ind_nsaids_treatment_pe: String
  therapy_type: String
  any_therapy: Boolean
  number_of_prior_regimens_any_therapy: Int
  total_number_of_doses_any_therapy: Int
  date_of_last_dose_any_therapy: String
  treatment_performed_at_site: Boolean
  treatment_performed_in_minimal_residual: Boolean
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  next_prior_therapy: prior_therapy @relation(name:"next", direction:OUT)
  prior_prior_therapy: prior_therapy @relation(name:"next", direction:IN)
}

type program {
  program_name: String
  program_acronym: String
  program_short_description: String
  program_full_description: String
  program_external_url: String
  program_sort_order: Int
  studies: [study] @relation(name:"member_of", direction:IN)
}

type sample {
  sample_id: String
  sample_site: String
  physical_sample_type: String
  general_sample_pathology: String
  tumor_sample_origin: String
  summarized_sample_type: String
  molecular_subtype: String
  specific_sample_pathology: String
  date_of_sample_collection: String
  sample_chronology: String
  necropsy_sample: String
  tumor_grade: String
  length_of_tumor: Float
  length_of_tumor_unit: String
  length_of_tumor_original: Float
  length_of_tumor_original_unit: String
  width_of_tumor: Float
  width_of_tumor_unit: String
  width_of_tumor_original: Float
  width_of_tumor_original_unit: String
  volume_of_tumor: Float
  volume_of_tumor_unit: String
  volume_of_tumor_original: Float
  volume_of_tumor_original_unit: String
  analysis_area: Float
  analysis_area_unit: String
  analysis_area_original: Float
  analysis_area_original_unit: String
  analysis_area_percentage_tumor: Float
  analysis_area_percentage_stroma: Float
  analysis_area_percentage_glass: Float
  analysis_area_percentage_pigmented_tumor: Float
  total_tissue_area: Float
  total_tissue_area_unit: String
  total_tissue_area_original: Float
  total_tissue_area_original_unit: String
  tumor_tissue_area: Float
  tumor_tissue_area_unit: String
  tumor_tissue_area_original: Float
  tumor_tissue_area_original_unit: String
  non_tumor_tissue_area: Float
  non_tumor_tissue_area_unit: String
  non_tumor_tissue_area_original: Float
  non_tumor_tissue_area_original_unit: String
  percentage_tumor: String
  percentage_stroma: Float
  sample_preservation: String
  comment: String
  case: case @relation(name:"of_case", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
  assays: [assay] @relation(name:"of_sample", direction:IN)
  files: [file] @relation(name:"of_sample", direction:IN)
  next_sample: sample @relation(name:"next", direction:OUT)
  prior_sample: sample @relation(name:"next", direction:IN)
}

type study {
  clinical_study_id: String
  clinical_study_designation: String
  clinical_study_name: String
  clinical_study_description: String
  clinical_study_type: String
  date_of_iacuc_approval: String
  dates_of_conduct: String
  study_arms: [study_arm] @relation(name:"member_of", direction:IN)
  program: program @relation(name:"member_of", direction:OUT)
  cases: [case] @relation(name:"member_of", direction:IN)
  cohorts: [cohort] @relation(name:"member_of", direction:IN)
  study_sites: [study_site] @relation(name:"of_study", direction:IN)
  principal_investigators: [principal_investigator] @relation(name:"of_study", direction:IN)
  files: [file] @relation(name:"of_study", direction:IN)
}

type study_arm {
  arm: String
  ctep_treatment_assignment_code: String
  arm_description: String
  cohorts: [cohort] @relation(name:"member_of", direction:IN)
  study: study @relation(name:"member_of", direction:OUT)
  agents: [agent] @relation(name:"of_study_arm", direction:IN)
}

type study_site {
  site_short_name: String
  veterinary_medical_center: String
  registering_institution: String
  studies: [study] @relation(name:"of_study", direction:OUT)
}

type visit {
  visit_date: String
  visit_number: String
  case: case @relation(name:"of_case", direction:OUT)
  cycle: cycle @relation(name:"of_cycle", direction:OUT)
  agent_administrations: [agent_administration] @relation(name:"on_visit", direction:IN)
  samples: [sample] @relation(name:"on_visit", direction:IN)
  physical_exams: [physical_exam] @relation(name:"on_visit", direction:IN)
  lab_exams: [lab_exam] @relation(name:"on_visit", direction:IN)
  disease_extents: [disease_extent] @relation(name:"on_visit", direction:IN)
  vital_signs: [vital_signs] @relation(name:"on_visit", direction:IN)
  next_visit: visit @relation(name:"next", direction:OUT)
  prior_visit: visit @relation(name:"next", direction:IN)
}

type vital_signs {
  date_of_vital_signs: String
  body_temperature: Float
  body_temperature_unit: String
  body_temperature_original: Float
  body_temperature_original_unit: String
  pulse: Int
  pulse_unit: String
  pulse_original: Int
  pulse_original_unit: String
  respiration_rate: Int
  respiration_rate_unit: String
  respiration_rate_original: Int
  respiration_rate_original_unit: String
  respiration_pattern: String
  systolic_bp: Int
  systolic_bp_unit: String
  systolic_bp_original: Int
  systolic_bp_original_unit: String
  pulse_ox: Float
  pulse_ox_unit: String
  pulse_ox_original: Float
  pulse_ox_original_unit: String
  patient_weight: Float
  patient_weight_unit: String
  patient_weight_original: Float
  patient_weight_original_unit: String
  body_surface_area: Float
  body_surface_area_unit: String
  body_surface_area_original: Float
  body_surface_area_original_unit: String
  modified_ecog: String
  ecg: Boolean
  assessment_timepoint: Int
  phase: String
  crf_id: String
  visit: visit @relation(name:"on_visit", direction:OUT)
}

schema {
 query: QueryType
}

type BreedCaseCount {
  breed: String
  cases: Int
}

type CaseDetail {
  patient_id: String
  breed: String
  patient_age_at_enrollment: Float
  sex: String
  disease_term: String
  stage_of_disease: String
}

type StudyCodeCaseCount {
  study_code: String
  cases: Int
}

type DiagnosisCaseCount {
  diagnosis: String
  cases: Int
}

type GenderCaseCount {
  gender: String
  cases: Int
}


type DiseaseSiteCaseCount {
  disease_site: String
  cases: Int
}

type NeuteredStatusCaseCount {
  neutered_status: String
  cases: Int
}

type StageOfDiseaseCaseCount {
  stage_of_disease :String
  cases :Int
}

type StudyTypeCaseCount {
  study_type: String
  cases: Int
}

type AgeCaseCount {
  age: Float
  cases: Int
}

type FileTypeCaseCount {
  data_type: String
  cases: Int
}

type ProgramCaseCount {
  program: String
  cases: Int
}

type FileFormatCaseCount {
  file_format: String
  cases: Int
}

type StudyOfProgram {
  program_id: String
  clinical_study_id: String
  clinical_study_designation: String
  clinical_study_name: String
  clinical_study_description: String
  clinical_study_type: String
  date_of_iacuc_approval: String
  dates_of_conduct: String
  numberOfCases: Int
}

type FileOverview {
  parent:String
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_status: String
  uuid: String
  file_location: String
}

type CaseOverview {
  case_id: String
  program: String
  study_code: String
  study_type: String
  breed: String
  diagnosis: String
  stage_of_disease: String
  age: Float
  sex: String
  neutered_status: String
  data_types: [String]
  disease_site: String
  samples: [String]
  sample_list: [sample]
  files: [FileOverview]
  file_formats: [String]
  demographic: demographic
  diagnosis_obj: diagnosis
}


type FilesOfCase{
  case_id: String
  parent:String
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_status: String
  uuid: String
  file_location: String
}

type StudyDetail {
  study_code: String
  file_name: String
  file_type: String
  association: String
  description: String
  format: String
  size: Float
  MD5: String
}

type FileDetail {
  clinical_study_designation: String
  clinical_study_name: String
  arm: String
  cohort_description: String
  cohort_dose: String
  case_id: String
  breed: String
  weight: Float
  sex: String
  neutered_indicator: String
  patient_age_at_enrollment: Float
  disease_term: String
  stage_of_disease: String
  primary_disease_site: String
  concurrent_disease: Boolean
  concurrent_disease_type: String
  visit_date: String
  visit_number: String
  day_in_cycle: Int
  sample_id: String
  sample_type: String
  general_sample_pathology: String
  specific_sample_pathology: String
  sample_site: String
  date_of_sample_collection: String
  necropsy_sample: Boolean
  percentage_tumor: Float
  percentage_stroma: Float
  comment: String
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_location: String
  uuid: String
  acl: String
  GUID: String
  md5: String
  size: Float
  url: String
}

type FileInfo {
  GUID: String
  md5: String
  size: Float
  acl: String
  url: String
}

type StudyStat {
  study_code: String
  files: Int
  totoal_size_MB: Float
  cases: Int
  samples: Int
}


type CaseOverview2 {
  case_id: String
  study_code: String
  study_type: String
  cohort: String
  breed: String
  diagnosis: String
  stage_of_disease: String
  age: Float
  sex: String
  neutered_status: String
  weight: Float
  response_to_treatment: String
  disease_site: String
}

type SearchResult {
  numberOfStudies: Int
  numberOfCases: Int
  numberOfSamples: Int
  numberOfFiles: Int
  numberOfAliquots: Int
  caseIds: [String]
  sampleIds: [String]
  fileIds: [String]
  firstPage: [CaseOverview2]
}

type QueryType {
  "Version"
  schemaVersion: String @cypher(statement: "RETURN '0.1.0'")

  "Simple count"
  numberOfStudies: Int @cypher(statement: "MATCH (n:study) RETURN  count (n)")
  numberOfCases: Int @cypher(statement: "MATCH (n:case) RETURN  count (n)")
  numberOfSamples:Int @cypher(statement: "MATCH (n:sample) RETURN  count (n)")
  numberOfFiles: Int @cypher(statement: "MATCH (n:file) RETURN  count (n)")
  numberOfAliquots: Int @cypher(statement: "MATCH (n:aliquot) return count(n)")

  "Count with parameter"
  sampleCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (s:sample)-[*]->(:study {clinical_study_designation: $study_code}) return count(DISTINCT(s))")
  fileCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(:study {clinical_study_designation: $study_code}) return count(distinct(f))")
  aliguotCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(:study {clinical_study_designation: $study_code}) return count(DISTINCT(a))")
  caseCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (c:case)-[*]->(:study {clinical_study_designation: $study_code}) return count(distinct(c))")
  fileCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(c:case {case_id: $case_id}) return count(DISTINCT(f))")
  aliquotCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(c:case {case_id: $case_id}) return count(DISTINCT(a))")
  sampleCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (s:sample)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(s))")
  fileCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(f))")
  aliguotCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(a))")
  studyCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (s:study)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(s))")
  caseCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (c:case)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(c))")
  sampleCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (c:case {case_id: $case_id})<-[*]-(s:sample) RETURN count(distinct(s))")

  "Count by group"
  caseCountByStudyCode: [StudyCodeCaseCount] @cypher(statement: "MATCH (s:study) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN s.clinical_study_designation AS study_code, count(DISTINCT(c)) AS cases ORDER BY s.clinical_study_designation")
  caseCountByDiagnosis: [DiagnosisCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.disease_term AS diagnosis, count(c) AS cases ORDER BY d.disease_term")
  caseCountByGender: [GenderCaseCount] @cypher(statement: "MATCH (d:demographic)-[:of_case]->(c:case) RETURN d.sex AS gender, count(c) AS cases ORDER BY d.sex")
  caseCountByBreed: [BreedCaseCount] @cypher(statement: "MATCH (c:case)<-[:of_case]-(d:demographic) RETURN d.breed AS breed, count(c) AS cases")
  caseCountByNeuteredStatus :[NeuteredStatusCaseCount] @cypher(statement: " MATCH (c:case)<--(d:demographic) return d.neutered_indicator AS neutered_status, count(c) AS cases ")
  caseCountByStageOfDisease: [StageOfDiseaseCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.stage_of_disease AS stage_of_disease, count(c) AS cases ORDER BY d.stage_of_disease")
  caseCountByDiseaseSite: [DiseaseSiteCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.primary_disease_site AS disease_site, count(c) AS cases ORDER BY d.primary_disease_site")
  caseCountByStudyType: [StudyTypeCaseCount] @cypher(statement: "MATCH (s:study)<-[*]-(c:case) RETURN s.clinical_study_type AS study_type, COUNT(DISTINCT(c)) AS cases")
  caseCountByAge: [AgeCaseCount] @cypher(statement: "MATCH (d:demographic)-->(c:case) RETURN d.patient_age_at_enrollment AS age, COUNT(DISTINCT(c)) AS cases ORDER BY age")
  caseCountByDataType: [FileTypeCaseCount] @cypher(statement: "MATCH (f:file)-[*]->(c:case) RETURN f.file_type AS data_type, COUNT(DISTINCT(c)) AS cases ORDER BY data_type")
  caseCountByFileFormat: [FileFormatCaseCount] @cypher(statement: "MATCH (f:file)-[*]->(c:case) RETURN f.file_format AS file_format, COUNT(DISTINCT(c)) AS cases ORDER BY file_format")
  caseCountByProgram: [ProgramCaseCount] @cypher(statement: "MATCH (p:program) OPTIONAL Match (p)<-[*]-(c:case) RETURN  p.program_acronym AS program, COUNT(DISTINCT(c)) AS cases ORDER BY program")

  "Combined info"
  studiesByProgramId(program_id: String!): [StudyOfProgram] @cypher(statement: "MATCH (p:program {program_acronym: $program_id})<-[*]-(s:study) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN p.program_acronym AS program_id, s.clinical_study_id AS clinical_study_id, s.clinical_study_designation AS clinical_study_designation, s.clinical_study_name AS clinical_study_name, s.clinical_study_description AS clinical_study_description, s.clinical_study_type AS clinical_study_type, s.date_of_iacuc_approval AS date_of_iacuc_approval, s.dates_of_conduct AS dates_of_conduct, COUNT(DISTINCT(c)) as numberOfCases ORDER BY clinical_study_designation")
  studiesByProgram: [StudyOfProgram] @cypher(statement:"MATCH (s:study) OPTIONAL MATCH (p:program)<-[*]-(s) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN p.program_acronym AS program_id, s.clinical_study_id AS clinical_study_id, s.clinical_study_designation AS clinical_study_designation, s.clinical_study_name AS clinical_study_name, s.clinical_study_description AS clinical_study_description, s.clinical_study_type AS clinical_study_type, s.date_of_iacuc_approval AS date_of_iacuc_approval, s.dates_of_conduct AS dates_of_conduct, COUNT(DISTINCT(c)) as numberOfCases ORDER BY clinical_study_designation")
  filesOfCase(case_id: String!): [FilesOfCase] @cypher(statement: "MATCH (f:file)-[*]->(c:case{case_id: $case_id}) WITH DISTINCT(f) AS f MATCH (f)-->(parent) RETURN f.file_status AS file_status,f.file_name AS file_name ,f.file_type AS file_type,f.file_description AS file_description,f.file_format AS file_format,f.file_size AS file_size,f.md5sum AS md5sum,f.uuid AS uuid,f.file_location AS file_location, head(labels(parent)) AS parent, $case_id AS case_id")
  filesOfCases(case_ids: [String!]!): [FilesOfCase] @cypher(statement: "MATCH (f:file)-[*]->(c:case) WITH DISTINCT(f) AS f, c MATCH (f)-->(parent) WHERE c.case_id IN $case_ids RETURN f.file_status AS file_status,f.file_name AS file_name ,f.file_type AS file_type,f.file_description AS file_description,f.file_format AS file_format,f.file_size AS file_size,f.md5sum AS md5sum,f.uuid AS uuid,f.file_location AS file_location, head(labels(parent)) AS parent, c.case_id AS case_id")

  caseOverview(study_codes: [String] = [], breeds: [String] = [], diagnoses: [String] = [], sexes: [String] = []): [CaseOverview] @cypher(statement: """
      MATCH (s:study)
      WITH collect(DISTINCT(s.clinical_study_designation)) AS all_studies
      MATCH (d:demographic)
      WITH collect(DISTINCT(d.breed)) AS all_breeds, collect(DISTINCT(d.sex)) AS all_sexes, all_studies
      MATCH (d:diagnosis)
      WITH collect(DISTINCT(d.disease_term)) AS all_diseases, all_breeds, all_sexes, all_studies
      MATCH (p:program)<-[*]-(s:study)<-[*]-(c:case)<--(demo:demographic), (c)<--(diag:diagnosis)
        WHERE s.clinical_study_designation IN CASE $study_codes WHEN [] THEN all_studies
          ELSE $study_codes
          END
        AND demo.breed IN CASE $breeds WHEN [] THEN all_breeds
          ELSE $breeds
          END
        AND diag.disease_term IN CASE $diagnoses WHEN [] THEN all_diseases
          ELSE $diagnoses
          END
        AND demo.sex IN CASE $sexes WHEN [] THEN all_sexes
          ELSE $sexes
          END
      OPTIONAL MATCH (f:file)-[*]->(c)
      OPTIONAL MATCH (f)-->(prt)
      OPTIONAL MATCH (samp:sample)-[*]->(c)
      WITH DISTINCT c AS c, p, s, demo, diag, f, samp, prt
      RETURN c.case_id AS case_id,
             s.clinical_study_designation AS study_code,
             p.program_acronym AS program,
             s.clinical_study_type AS study_type,
             demo.breed AS breed,
             diag.disease_term AS diagnosis,
             diag.stage_of_disease AS stage_of_disease,
             diag.primary_disease_site AS disease_site,
             demo.patient_age_at_enrollment AS age,
             demo.sex AS sex,
             demo.neutered_indicator AS neutered_status,
             collect(DISTINCT(f.file_type)) AS data_types,
             collect(DISTINCT(f.file_format)) AS file_formats,
             collect(DISTINCT(f {parent:labels(prt)[0], .file_name, .file_name, .file_type, .file_description, .file_format, .file_size, .md5sum, .file_status, .uuid, .file_location})) AS files,
             collect(DISTINCT(samp.sample_id)) AS samples,
             collect(DISTINCT(samp)) AS sample_list,
             demo AS demographic,
             diag AS diagnosis_obj
  """, passThrough:true)

  caseOverviewPaged (case_ids: [String] = [], order_by: String = "", first: Int = 10, offset: Int = 0): [CaseOverview2] @cypher(statement: """
    MATCH (c:case)
      WHERE (size($case_ids) = 0 OR c.case_id IN $case_ids)
    OPTIONAL MATCH (s:study)<--(c)
    OPTIONAL MATCH (c)<--(demo:demographic)
    OPTIONAL MATCH (c)<--(diag:diagnosis)
    OPTIONAL MATCH (c)-->(co:cohort)
    WITH DISTINCT c AS c, s, co, demo, diag
    RETURN c.case_id AS case_id,
         s.clinical_study_designation AS study_code,
         s.clinical_study_type AS study_type,
         co.cohort_description AS cohort,
         demo.breed AS breed,
         diag.disease_term AS diagnosis,
         diag.stage_of_disease AS stage_of_disease,
         diag.primary_disease_site AS disease_site,
         demo.patient_age_at_enrollment AS age,
         demo.sex AS sex,
         demo.neutered_indicator AS neutered_status,
         demo.weight AS weight,
         diag.best_response AS response_to_treatment
    ORDER BY
      CASE $order_by
        WHEN "study_code" THEN study_code
        WHEN "study_type" THEN study_type
        WHEN "cohort" THEN cohort
        WHEN "breed" THEN breed
        WHEN "diagnosis" THEN diagnosis
        WHEN "stage_of_disease" THEN stage_of_disease
        WHEN "disease_site" THEN disease_site
        WHEN "age" THEN age
        WHEN "sex" THEN sex
        WHEN "neutered_status" THEN neutered_status
        WHEN "weight" THEN weight
        WHEN "response_to_treatment" THEN response_to_treatment
        ELSE case_id
      END
    SKIP $offset
    LIMIT $first
  """, passThrough: true)

  caseOverviewPagedDesc (case_ids: [String] = [], order_by: String = "", first: Int = 10, offset: Int = 0): [CaseOverview2] @cypher(statement: """
    MATCH (c:case)
      WHERE (size($case_ids) = 0 OR c.case_id IN $case_ids)
    OPTIONAL MATCH (s:study)<--(c)
    OPTIONAL MATCH (c)<--(demo:demographic)
    OPTIONAL MATCH (c)<--(diag:diagnosis)
    OPTIONAL MATCH (c)-->(co:cohort)
    WITH DISTINCT c AS c, s, co, demo, diag
    RETURN c.case_id AS case_id,
         s.clinical_study_designation AS study_code,
         s.clinical_study_type AS study_type,
         co.cohort_description AS cohort,
         demo.breed AS breed,
         diag.disease_term AS diagnosis,
         diag.stage_of_disease AS stage_of_disease,
         diag.primary_disease_site AS disease_site,
         demo.patient_age_at_enrollment AS age,
         demo.sex AS sex,
         demo.neutered_indicator AS neutered_status,
         demo.weight AS weight,
         diag.best_response AS response_to_treatment
    ORDER BY
      CASE $order_by
        WHEN "study_code" THEN study_code
        WHEN "study_type" THEN study_type
        WHEN "cohort" THEN cohort
        WHEN "breed" THEN breed
        WHEN "diagnosis" THEN diagnosis
        WHEN "stage_of_disease" THEN stage_of_disease
        WHEN "disease_site" THEN disease_site
        WHEN "age" THEN age
        WHEN "sex" THEN sex
        WHEN "neutered_status" THEN neutered_status
        WHEN "weight" THEN weight
        WHEN "response_to_treatment" THEN response_to_treatment
        ELSE case_id
      END DESC
    SKIP $offset
    LIMIT $first
  """, passThrough: true)

  searchCases (
    study: [String] = [],
    study_type: [String] = [],
    breed: [String] = [],
    diagnosis: [String] = [],
    disease_site: [String] = [],
    stage_of_disease: [String] = [],
    response_to_treatment: [String] = [],
    sex: [String] = [],
    neutered_status: [String] = [],
    sample_type: [String] = [],
    sample_pathology: [String] = [],
    file_association: [String] = [],
    file_type: [String] = [],
    file_format: [String] = [],
    first: Int = 100
  ): SearchResult @cypher(statement: """
    MATCH (p:program)<--(s:study)<--(c:case)<--(demo:demographic), (c)<--(diag:diagnosis)
      WHERE (size($study) = 0 OR s.clinical_study_designation IN $study)
        AND (size($study_type) = 0 OR s.clinical_study_type IN $study_type)
        AND (size($breed) = 0 OR demo.breed IN $breed)
        AND (size($diagnosis) = 0 OR diag.disease_term IN $diagnosis)
        AND (size($disease_site) = 0 OR diag.primary_disease_site IN $disease_site)
        AND (size($stage_of_disease) = 0 OR diag.stage_of_disease IN $stage_of_disease)
        AND (size($response_to_treatment) = 0 OR diag.best_response IN $response_to_treatment)
    OPTIONAL MATCH (c)-->(co:cohort)
    OPTIONAL MATCH (f:file)-[*]->(c)
    OPTIONAL MATCH (f)-->(parent)
    OPTIONAL MATCH (samp:sample)-->(c)
    WITH DISTINCT c AS c, p, s, co, demo, diag, f, parent, samp
      WHERE (size($sample_type) = 0 OR samp.summarized_sample_type IN $sample_type)
        AND (size($sample_pathology) = 0 OR samp.specific_sample_pathology IN $sample_pathology)
        AND (size($file_association) = 0 OR head(labels(parent)) IN $file_association)
        AND (size($file_type) = 0 OR f.file_type IN $file_type)
        AND (size($file_format) = 0 OR f.file_format IN $file_format)
        AND (size($sex) = 0 OR demo.sex IN $sex)
        AND (size($neutered_status) = 0 OR demo.neutered_indicator IN $neutered_status)
    WITH c.case_id AS case_id,
         s.clinical_study_designation AS study_code,
         s.clinical_study_type AS study_type,
         co.cohort_description AS cohort,
         demo.breed AS breed,
         diag.disease_term AS diagnosis,
         diag.stage_of_disease AS stage_of_disease,
         diag.primary_disease_site AS disease_site,
         demo.patient_age_at_enrollment AS age,
         demo.sex AS sex,
         demo.neutered_indicator AS neutered_status,
         demo.weight AS weight,
         diag.best_response AS response_to_treatment,
         samp.sample_id AS sample_id,
         f.uuid AS file_id
    RETURN
         COUNT(DISTINCT study_code) AS numberOfStudies,
         COUNT(DISTINCT case_id) AS numberOfCases,
         COUNT(DISTINCT sample_id) AS numberOfSamples,
         COUNT(DISTINCT file_id) AS numberOfFiles,
         0 AS numberOfAliquots,
         COLLECT(DISTINCT case_id) AS caseIds,
         COLLECT(DISTINCT sample_id) AS sampleIds,
         COLLECT(DISTINCT file_id) AS fileIds,
         COLLECT(DISTINCT ({
           case_id: case_id,
           study_code: study_code,
           study_type: study_type,
           cohort: cohort,
           breed: breed,
           diagnosis: diagnosis,
           stage_of_disease: stage_of_disease,
           age: age,
           sex: sex,
           neutered_status: neutered_status,
           weight: weight,
           response_to_treatment: response_to_treatment,
           disease_site: disease_site
         }))[0..$first] AS firstPage
  """, passThrough:true)

  casesInList(case_ids: [String!]!): [CaseOverview] @cypher(statement: "MATCH (p:program)<-[*]-(s:study)<-[*]-(c:case)<--(demo:demographic), (c)<--(diag:diagnosis) WHERE c.case_id IN $case_ids OPTIONAL MATCH (f:file)-[*]->(c) OPTIONAL MATCH (samp:sample)-[*]->(c) WITH DISTINCT c AS c, p, s, demo, diag, f, samp RETURN c.case_id AS case_id, s.clinical_study_designation AS study_code, p.program_acronym AS program, s.clinical_study_type AS study_type, demo.breed AS breed, diag.disease_term AS diagnosis, diag.stage_of_disease AS stage_of_disease, diag.primary_disease_site AS disease_site, demo.patient_age_at_enrollment AS age, demo.sex AS sex, demo.neutered_indicator AS neutered_status, collect(DISTINCT(f.file_type)) AS data_types, collect(DISTINCT(f.file_format)) AS file_formats, collect(DISTINCT(f)) AS files, collect(DISTINCT(samp.sample_id)) AS samples, collect(DISTINCT(samp)) AS sample_list", passThrough:true)
  studyDetail(study_code: String!): [StudyDetail] @cypher(statement: "MATCH (s:study {clinical_study_designation: $study_code})<-[*]-(p)<--(f:file) WITH DISTINCT(f), s, p RETURN s.clinical_study_designation AS study_code, f.file_name AS file_name, f.file_type AS file_type, head(labels(p)) AS association, f.file_description AS description, f.file_format AS format, f.file_size AS size, f.md5sum AS MD5")

  "Find nodes with parameters"
  casesByStudyId(study_id: String!): [case] @cypher(statement: "MATCH (s:study {clinical_study_designation: $study_id})<-[*]-(c:case) return DISTINCT(c)")
  samplesByCaseId(case_id: String!): [sample] @cypher(statement: "MATCH (c:case {case_id: $case_id})<-[*]-(s:sample) RETURN s")
  filesBySampleId(sample_id: String!): [file] @cypher(statement: "MATCH (s:sample {sample_id: $sample_id})<-[*]-(f:file) RETURN f")
  filesOfStudy(study_code: String!): [file] @cypher(statement: "MATCH (f:file)-[*]->(:study {clinical_study_designation: $study_code}) return DISTINCT(f)")
  studyFiles(study_codes: [String!]): [file] @cypher(statement: "MATCH (s:study)<--(f:file) WHERE s.clinical_study_designation IN $study_codes RETURN f", passThrough: true)

  "For SBG to replace manifest"
  fileDetail(file_ids: [String] = []): [FileDetail] @cypher(statement: """
    MATCH (f:file)
    WITH collect(f.uuid) AS all_files
    MATCH (f:file)-[*]->(s:study)
      WHERE f.uuid IN CASE $file_ids WHEN [] THEN all_files
        ELSE $file_ids
        END
    OPTIONAL MATCH (f)-[*]->(c:case)
    OPTIONAL MATCH (f)-[*]->(co:cohort)
    OPTIONAL MATCH (f)-[*]->(arm:study_arm)
    OPTIONAL MATCH (demo:demographic)-->(c)
    OPTIONAL MATCH (diag:diagnosis)-->(c)
    OPTIONAL MATCH (f)-[*]->(v:visit)
    OPTIONAL MATCH (f)-->(samp:sample)
    WITH DISTINCT (f) AS f, s, c, co, arm, demo, diag, v, samp
    RETURN s.clinical_study_designation AS clinical_study_designation,
           s.clinical_study_name AS clinical_study_name,
           arm.arm AS arm,
           co.cohort_description AS cohort_description,
           co.cohort_dose AS cohort_dose,
           c.case_id AS case_id,
           demo.breed AS breed,
           demo.weight AS weight,
           demo.sex AS sex,
           demo.neutered_indicator AS neutered_indicator,
           demo.patient_age_at_enrollment AS patient_age_at_enrollment,
           diag.disease_term AS disease_term,
           diag.stage_of_disease AS stage_of_disease,
           diag.primary_disease_site AS primary_disease_site,
           diag.concurrent_disease AS concurrent_disease,
           diag.concurrent_disease_type AS concurrent_disease_type,
           v.visit_date AS visit_date,
           v.visit_number AS visit_number,
           v.day_in_cycle AS day_in_cycle,
           samp.sample_id AS sample_id,
           samp.sample_type AS sample_type,
           samp.general_sample_pathology AS general_sample_pathology,
           samp.specific_sample_pathology AS specific_sample_pathology,
           samp.sample_site AS sample_site,
           samp.date_of_sample_collection AS date_of_sample_collection,
           samp.necropsy_sample AS necropsy_sample,
           samp.percentage_tumor AS percentage_tumor,
           samp.percentage_stroma AS percentage_stroma,
           samp.comment AS comment,
           f.file_name AS file_name,
           f.file_type AS file_type,
           f.file_description AS file_description,
           f.file_format AS file_format,
           f.file_size AS file_size,
           f.md5sum AS md5sum,
           f.file_location AS file_location,
           f.uuid AS uuid,
           f.acl AS acl,
           'dg.4DFC/' + f.uuid AS GUID,
           f.md5sum AS md5,
           f.file_size AS size,
           f.file_location AS url
      ORDER BY file_type, case_id
  """)
  "For IndexD to replace manifest"
  fileInfo(file_ids: [String] = []): [FileInfo] @cypher(statement: """
    MATCH (f:file)
    WITH collect(f.uuid) as all_files
    MATCH (f:file)
      WHERE f.uuid IN CASE $file_ids WHEN [] THEN all_files ELSE $file_ids END
    RETURN 'dg.4DFC/' + f.uuid AS GUID,
           f.md5sum AS md5,
           f.file_size AS size,
           f.acl AS acl,
           f.file_location AS url
    ORDER BY url
  """)

  studyStats: [StudyStat] @cypher(statement: """
      MATCH (s:study)
      OPTIONAL MATCH (s)<-[*]-(c:case)
      WITH s, COUNT(DISTINCT c) AS cases
      OPTIONAL MATCH (s)<-[*]-(samp:sample)
      WITH s, cases, COUNT(DISTINCT samp) AS samples
      OPTIONAL MATCH (s)<-[*]-(f:file)
      WITH DISTINCT f, s, cases, samples
      RETURN  s.clinical_study_designation AS study_code,
              COUNT(f) AS files,
              SUM(f.file_size)/1000000 AS totoal_size_MB,
              cases,
              samples
  """)
}
